# -*- coding: utf-8 -*-
"""Introduction  To Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hNt3lgAY7sKFPM1fUbJy1VKPg2Ypnivb

**Python** is an interpreted, high-level language created by Guido van Rossum and released in 1991. It is dynamically typed and garbage collected.Python programs have the extension.py and can be run from the command line by typing python file_name.py.

- In computer science, garbage collection (GC) is a form of automatic memory management. The garbage collector attempts to reclaim memory which was allocated by the program, but is no longer referenced—also called garbage, garbage collection relieves the programmer from performing manual memory management where the programmer specifies what objects to deallocate and return to the memory system and when to do so. 

Probably its most noticeable characteristic is its use of significant white space to delimit code blocks, instead of the more popular {} symbols End-of-line semicolons (;) are optional and usually not used in Python.

Python becomes the best solution in many domains from web applications, data analysis, data science, machine learning, and AI.

**Common Feature Provided By python :**

- Simplicity: Think less of the syntax of the language and more of the code.

- Open Source: A powerful language and it is free for everyone to use and alter as needed.

- Portability: Python code can be shared and it would work the same way it was intended to. Seamless and hassle-free.

- Being Embeddable & Extensible: Python can have snippets of other languages inside it to perform certain functions.
- Being Interpreted: The worries of large memory tasks and other heavy CPU tasks are taken care of by Python itself leaving you to worry only about coding.

- Huge amount of libraries: Data Science? Python has you covered. Web Development? Python still has you covered.

- Object Orientation: Objects help breaking-down complex real-life problems into such that they can be coded and solved to obtain solutions.

**Applications of Python.**
- Artificial Intelligence
- Desktop Application
- Automation
- Web Development
- Data Wrangling, Exploration And Visualisation.

**Installation:**

Download the latest version of Python for your operating system here. You can read more about setting up a python development using VS Code from this tutorial by pythontutorial.net.

**Python Hello World.**
As Raghu Venkatesh, Engineering Manager at Atlassian said, if you can write “hello world” you can change the world. So let create our first python program, hello world program.

- First, create a new folder where you will be saving you python files, let say Lux.

- Second, launch the VS code and open the new folder you created, Lux.

- Third, create a new python file, let say app.py file and enter the following code and save the file:
```python
print('Hello, World!')
``` 

The **print()** is a built-in function that displays a message on the screen. In our case, it’ll show the message **'Hello, Word!'**.

**Executing the Python program.**

To execute the **app.py** file we created above, you first launch the Command Prompt on Windows or Terminal on macOS or Linux.

Then, navgiate to the folder containing our file, for our case Lux.

After that, type the following command to execute the app.py file:

```bash 
Python3 app.py
``` 

If everything is fine, you’ll see the following message on the screen:

```
Hello, World!
```

## **Python support the following 4 programming techniques**

- Object oriented programming

- Procedural oriented  programming 
   
- Functional oriented programming 

- Imperative oriented programming

**Keywords** in python are special reserved words which conveys special meaning to the python interpreter or IDE 

**Examples:** True, False Pass, Try def, class, if etc

Keywords can not be used as identifiers in Python

**Identifiers** are names used to identify a variable function class object or a module in Python.
Examples: name = “Lux Tech Academy” 
Name in the above example  is an identifier, and note that identifiers are case sensitive, this means name and Name are two different identifiers in Python programming language

# **Rules for naming identifiers**


- No special Characters except underscores can be used as an identifier.


- Keywords can not be used as an identifiers.


- Python identifiers are case sensitive .


- First character of an identifier can be only a character or underscore,  it can not be a digit

**Comments**

A comment is text in a program's code, script, or another file that is not meant to be seen by the user running the program. However, is seen when viewing the source code.

Comments help make code easier to understand by explaining what is happening and help prevent portions of a program from executing. 

```python
# single line comment

'''
multiline comment
Using  docstring
'''
```

**NOTE: Use comments where appropriate and don't over do it.**

**Variables**

Variables are used to store information to be referenced and manipulated in a computer program. They also provide a way of labeling data with a descriptive name, so our programs can be understood more clearly by the reader and ourselves. It is helpful to think of variables as containers that hold information. Their sole purpose is to label and store data in memory. This data can then be used throughout your program.

```python
favourite_food = "Rösti"
print(favourite_food)
```

**Note:**

Variables do not need to be declared. Their data types are inferred from their assignment statement, which makes Python a dynamically typed language. This means that different data types can be assigned to the same variable throughout the code.

```python
favourite_food = "Rösti"
print(favourite_food)
favourite_food = 26
print(favourite_food)
favourite_food = False
print(favourite_food)
```

**Literals in Python are data given in a variable or constant, there are 4 types of literals in Python.**

- String literals 
- Numeric literals 
- Boolean literals  
- Special Literals

**Arithmetic Operators.**

```python
print(46 + 2)  # 48 (addition)
print(10 - 9)  # 1 (subtraction)
print(3 * 3)  # 9 (multiplication)
print(84 / 2)  # 42.0 (division)
print(2 ** 8)  # 256 (exponent)
print(11 % 2)  # 1 (remainder of the division)
print(11 // 2)  # 5 (floor division) 
```

# Comparison, Logical, and Conditional Operators.
**Comparison: ==, !=, <, >, <=, >=**

**Logical: and, or, not**

**Conditionals: if, else, elif**

**# logical operators:**

```python
laundry_day = "Monday"
today = "Tuesday"
on_vacation = False
if today is laundry_day and today is not "Sunday" and on_vacation is False:
  print("It's laundry day!")
else:
  print("The laundry can wait!")
```

**# comparison operators:**

```python
age = 21
if age >= 21:
  print("You can drive a trailer")
elif age >= 16:
  print("You can drive a car")
else:
  print("You can ride a bike")
```

# **Data Types**

**1). Strings.**

**Example 1:**

```python
language = "Python"
```

**Example 2:**

```python
multiline_str = '''
one
per
line'''  
```


**Example 3, escape characters:**

```python
escape_str = "She said: \"Python is great!\""
print(escape_str) # She said: "Python is great!"  
```

**Example 4, concatenate strings:**

```python
one = "Lux"
two = "Academy"
print(one + " " + two) # Lux Academy 
```

Example 5: interpolation.

```python
# method 1
first_name = "Lux"
last_name = "Academy"
greet = f"Welcome at {first_name} {last_name}!" 
print(greet)  # Welcome at Lux Tech Academy!

# method 2
first_name = "Lux"
last_name = "Academy"
greet = 'Welcome at {} {}!'.format(first_name, last_name)
print(greet)  # Welcome at Lux Tech Academy!

# method 3
first_name = "Lux"
last_name = "Academy"
greet = 'Welcome at{first} {last} !'.format( first=first_name, last=last_name) 
print(greet)  # Welcome at Lux Tech Academy!
```

**Example 6, extract substrings**

```python
name = "Monty Python"
print(name[6:9]) # Pyt
print(name[6:]) # Python
print(name[:5]) # Monty
```

**2). Numbers**

Python supports three numeric data types: int, float, and complex. They are inferred, so need not be specified.

```python
age = 18 # int
pi = 3.14 # float
total = age + pi # complex
print(type(age), type(pi), type(total))

# <class 'int'> <class 'float'> <class 'float'>
```

**3). Booleans.**

```python
# booleans
a = True
b = False
if a is True and b is False:
  print("YAY!")
```

**4). Lists.**

A list in Python is what other programming languages call an array. They use Zero-based indexing, and the items can contain any type of data. List items are nested in [].

```python
# can store any data type
multiple_types = [True, 3.7, "Python"]

# access and modify
favourite_foods = ["pasta", "pizza", "french fries"]
print(favourite_foods[1]) # pizza
favourite_foods[0] = "rösti"
print(favourite_foods[0]) # rösti

# subsets
print(favourite_foods[1:3]) # ['pizza', 'french fries']
print(favourite_foods[2:]) # ['french fries']
print(favourite_foods[0:2]) # ['rösti', 'pizza']

# append
favourite_foods.append("paella")

# insert at index
favourite_foods.insert(1, "soup")

# remove
favourite_foods.remove("soup")

# get length
print(len(favourite_foods)) # 4

# get subset (the original list is not modified)
print(favourite_foods[1:3]) # ['pizza', 'french fries']

# lists inside lists
favourite_drinks = ["water", "wine", "juice"]
favourites = [favourite_foods, favourite_drinks]
print(favourites[1][2]) # juice
```
**5). Tuples**

Tuples are just like lists, but immutable (cannot be modified). They are surrounded by ().

```python
#tuples
new_tuple = ("a", "b", "c", "d")
print(len(new_tuple)) # 4
print(new_tuple[1]) # b
print(new_tuple[1:4]) # ('b', 'c', 'd')
6). Dictionaries.
Dictionaries are key-value pairs. They are surrounded by {} and are similar to objects in JavaScript. The values can have any data type.
language_creators = {
  "Python" : "Guido van Rossum",
  "C" : "Dennis Ritchie",
  "Java" : "James Gosling",
  "Go": "Robert Griesemer",
  "Perl" : "Larry Wall"
}

# access, modify, delete
print(language_creators["Python"]) # Guido van Rossum
language_creators["Go"] = ["Robert Griesemer", "Rob Pike", "Ken Thompson"]
print(language_creators["Go"]) # ['Robert Griesemer', 'Rob Pike', 'Ken Thompson']
print(len(language_creators)) # 5
del language_creators["Perl"]
print(len(language_creators)) # 4

# print keys and values
print(language_creators.keys())
print(language_creators.values())
```

### **Control Flow and Decision Making**

You use the **if statement** to execute a block of code based on a specified condition. The **if statement** checks the condition first. If the condition evaluates to **True,** it executes the statements in the if-block. Otherwise, it ignores the statements.

Note that the colon **(:)** that follows the condition is very important. If you forget it, you’ll get a syntax error.

```python
age = input('Enter your age:')
if int(age) >= 18:
    print("You're eligible to vote.")
    print("Let's go and vote.")
```

Sometimes, you want to perform an action when a condition is True and another action when the condition is False.


To do so, you use the **if...else statement.** 

```python
age = input('Enter your age:')
if int(age) >= 18:
    print("You're eligible to vote.")
else:
    print("You're not eligible to vote.")
``` 

If you want to check multiple conditions and perform an action accordingly, you can use the if...elif...else statement. The elif stands for else if.

Example consinder the example below, in the example:

- If the input age is less than 5, the ticket price will be  5 dollars .
- If the input age is greater than or equal to 5 and less than 16, the ticket price is 10 dollars .
- Otherwise, the ticket price is $18.

```python
age = input('Enter your age:')

# convert the string to int
your_age = int(age)

# determine the ticket price
if your_age < 5:
    ticket_price = 5
elif your_age < 16:
    ticket_price = 10
else:
    ticket_price = 18

# show the ticket price
print(f"You'll pay ${ticket_price} for the ticket")
``` 

So in general, 
1). Use the if statement when you want to run a code block based on a condition.

2). Use the if...else statement when you want to run another code block if the condition is not True.

3). Use the if...elif...else statement when you want to check multiple conditions and run the corresponding code block that follows the condition that evaluates to True.


**For loops**

```python
# foor loop
for x in range(0, 3):
  print(x)
```

**loop through list**

```python
for x in ["Python", "Go", "Java"]:
  print(x)
```

**loop through dictionary**

```python
language_creators = {
  "Python" : "Guido van Rossum",
  "C" : "Dennis Ritchie",
  "Java" : "James Gosling",
}
for key, value in language_creators.items():
  print("Language: {}; Creator: {}".format(key, value))
``` 

**While loops.**

```python
# while loop
level = 0
while(level < 10):
  level += 1
```

**Functions.**
Functions are defined using the def keyword. 
```python
# functions
def allowed_to_drive(age):
  if age >= 21:
    return True
  else:
    return False

print(allowed_to_drive(42)) # True
print(allowed_to_drive(12)) # False
```

Default values for arguments may also be defined.

```python
def is_laundry_day(today, laundry_day = "Monday", on_vacation = False):
  if today is laundry_day and today is not "Sunday" and on_vacation is False:
    return True
  else:
    return False

print(is_laundry_day("Tuesday")) # False
print(is_laundry_day("Tuesday", "Tuesday")) # True
print(is_laundry_day("Friday", "Friday", True)) # False
```

**Classes.**

Classes are collections of variables and functions that work with those variables.
Classes in Python are defined with the class keyword. They are similar to classes in other languages like Java and C#, but differences include self being used instead of this to refer to the object resulted from the class. Also, the constructor function’s name is init, instead of the more popular classname. self must be used every time a class variable is referenced and must be the first argument in each function’s argument list, including the constructor.

Python does not support method overloading, but it can be achieved to some extent by using default values for arguments (shown in the Functions section).


```python
# classes

class Email:
  # __ means private
  __read = False

  def __init__(self, subject, body):
    self.subject = subject
    self.body = body

  def mark_as_read(self):
    self.__read = True

  def is_read(self):
    return self.__read

  def is_spam(self):
    return "you won 1 million" in self.subject

e = Email("Check this out", "There are a bunch of free online course here: https://course.online")
print(e.is_spam()) # False
print(e.mark_as_read())
print(e.is_read()) # True
```

Python also supports inheritance, which means that classes can be set to inherit methods and variables from another class or multiple classes (multiple inheritance).

```python
# inheritance
class EmailWithAttachment(Email):
  def __init__(self, subject, body, attachment):
    super(EmailWithAttachment, self).__init__(subject, body)
    self.__attachment = attachment

  def get_attachment_size(self):
    return len(self.__attachment)

email_with_attachment = EmailWithAttachment("you won 1 million dollars", "open attachment to win", "one million.pdf")
print(email_with_attachment.is_spam()) # True
print(email_with_attachment.get_attachment_size()) # 15
```

**File I/O**

```Python 
# write
todos_file = open("todos.txt", "wb")
todos_file.write(bytes("buy a new domain name\n", "UTF-8"))
todos_file.write(bytes("work on the side project\n", "UTF-8"))
todos_file.write(bytes("learn a new programming language\n", "UTF-8"))
todos_file.close()

# read
todos_file = open("todos.txt", "r+")
todos_file_contents = todos_file.read()
print(todos_file_contents) 
```
"""

print("helllo world");

"""Read more about file handling in python 👉🏻: https://stackabuse.com/writing-files-using-python/

Reference :

- https://www.pythontutorial.net/ 
- 
- 
-
"""

